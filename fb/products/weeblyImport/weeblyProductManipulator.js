require('dotenv').config()
const _ = require('lodash')
const glob = require('glob')
const path = require('path')
const fs = require('fs')

let weeblyProducts = require('./weeblyProducts.json')

let uniqeWeeblyProducts = _.uniqBy(weeblyProducts.products, (product) => {
  return product['PRODUCT ID']
})

let createStripeProducts = {
  products: [],
}

_.forEach(uniqeWeeblyProducts, (weeblyProduct) => {
  addName(weeblyProduct)
  addDescription(weeblyProduct)
  addImages(weeblyProduct)
})
addActive()
addShippable()
addType()

// FUNCTIONS
function addName(weeblyProduct) {
  let object = {
    name: weeblyProduct.TITLE,
  }
  createStripeProducts.products.push(object)
}

function addActive() {
  _.forEach(createStripeProducts.products, (product) => {
    product.active = true
  })
}

function addShippable() {
  _.forEach(createStripeProducts.products, (product) => {
    product.shippable = true
  })
}

function addType() {
  _.forEach(createStripeProducts.products, (product) => {
    product.type = 'good'
  })
}

function addDescription(weeblyProduct) {
  _.find(createStripeProducts.products, (product) => {
    return product.name === weeblyProduct.TITLE
  }).description = weeblyProduct.DESCRIPTION
}

// here, need to update images
function addImages(weeblyProduct) {
  _.find(createStripeProducts.products, (product) => {
    return product.name === weeblyProduct.TITLE
  }).images = [weeblyProduct.IMAGE]
}

function createJsonForStripeRateLimit(formattedJson) {
  let itr = 1
  let itr2 = 1
  let localJson = { products: [] }
  _.forEach(formattedJson.products, (product) => {
    localJson.products.push(product)
    // console.log(product)
    if (itr % 19 === 0 || _.last(formattedJson.products) == product) {
      localJson = JSON.stringify(localJson)
      // console.log(localJson)
      fs.writeFile(
        'createStripeProducts' + itr2 + '.json',
        localJson,
        'utf8',
        (err) => {
          console.log(err)
        }
      )
      localJson = { products: [] }
      itr2 = itr2 + 1
      // console.log(itr2)
    }
    itr++
    console.log(itr)
  })
}

// console.log(createStripeProducts)

let formattedJson = createStripeProducts

createStripeProducts = JSON.stringify(createStripeProducts)

fs.writeFile(
  'createStripeProducts.json',
  createStripeProducts,
  'utf8',
  (err) => {
    console.log(err)
  }
)

createJsonForStripeRateLimit(formattedJson)

// CREATE A PRODUCT:
//     PARAMETERS:
//       REQUIRED:
//         name:
//           The product’s name, meant to be displayable to the customer.
//           Whenever this product is sold via a subscription, name will
//           show up on associated invoice line item descriptions.
//         function:
//           addName(weeblyProduct)

//       OPTIONAL:
//         id:
//           An identifier will be randomly generated by Stripe. You can
//           optionally override this ID, but the ID must be unique across all
//           products in your Stripe account.

//         active:
//           Whether the product is currently available for purchase. Defaults to true.
//         function:
//           addActive()

//         description:
//           The product’s description, meant to be displayable to the customer.
//           Use this field to optionally store a long form explanation of the
//           product being sold for your own rendering purposes.
//         function:
//           addDescription(weeblyProduct)

//         metadata:
//           Set of key-value pairs that you can attach to an object. This can
//           be useful for storing additional information about the object in a
//           structured format. Individual keys can be unset by posting an empty
//           value to them. All keys can be unset by posting an empty value to metadata.

//         attributes:
//           A list of up to 5 alphanumeric attributes.

//         caption:
//           A short one-line description of the product, meant to be displayable
//           to the customer. May only be set if type=good.

//         deactivate_on:
//           An array of Connect application names or identifiers that should not
//           be able to order the SKUs for this product. May only be set if type=good.

//         images:
//           A list of up to 8 URLs of images for this product, meant to be
//           displayable to the customer.
//         function:
//           addImages(weeblyProduct)

//         package_dimensions:
//           The dimensions of this product for shipping purposes. A SKU
//           associated with this product can override this value by having
//           its own package_dimensions. May only be set if type=good.
//             CHILD PARAMETERS:
//                 REQUIRED:
//                   package_dimensions.height:
//                     Height, in inches. Maximum precision is 2 decimal places.
//                   package_dimensions.length:
//                     Length, in inches. Maximum precision is 2 decimal places.
//                   package_dimensions.weight:
//                     Weight, in ounces. Maximum precision is 2 decimal places.
//                   package_dimensions.width:
//                     Width, in inches. Maximum precision is 2 decimal places.

//         shippable:
//           Whether this product is shipped (i.e., physical goods).
//           Defaults to true. May only be set if type=good
//         function:
//           addActive()

//         type:
//           The type of the product. Defaults to service if not explicitly
//           specified, enabling use of this product with Subscriptions and
//           Plans. Set this parameter to good to use this product with Orders
//           and SKUs. On API versions before 2018-02-05, this field defaults
//           to good for compatibility reasons.
//         function:
//           addActive()

//         url:
//           A URL of a publicly-accessible webpage for this product. May only
//           be set if type=good.

// let numUniqueWeeblyProducts = 0

// _.forEach(uniqeWeeblyProducts, (product) => {
//   numUniqueWeeblyProducts++
//   // console.log(product)
//   // console.log('numUniqueWeeblyProducts: ', numUniqueWeeblyProducts)
// })

// let totalWeeblyProducts = 0

// _.forEach(weeblyProducts.products, (product) => {
//   totalWeeblyProducts++
//   // console.log(product)
//   // console.log('totalWeeblyProducts: ', totalWeeblyProducts)
// })
// console.log('numUniqueWeeblyProducts: ', numUniqueWeeblyProducts)
// console.log('totalWeeblyProducts: ', totalWeeblyProducts)
